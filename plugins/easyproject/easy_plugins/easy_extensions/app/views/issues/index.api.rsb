api.array :issues, api_meta(:total_count => @issue_count, :offset => @offset, :limit => @limit) do
  @issues.each do |issue|
    api.issue do
      api.id issue.id
      api.project(:id => issue.project_id, :name => issue.project.name) unless issue.project.nil?
      api.tracker(:id => issue.tracker_id, :name => issue.tracker.name) unless issue.tracker.nil?
      api.status(:id => issue.status_id, :name => issue.status.name) unless issue.status.nil?
      api.priority(:id => issue.priority_id, :name => issue.priority.name) unless issue.priority.nil?
      api.author(:id => issue.author_id, :name => issue.author.name) unless issue.author.nil?
      if issue.assigned_to.present?
        assigned_to_hash = { :id => issue.assigned_to_id, :name => issue.assigned_to.name }
        if issue.assigned_to.respond_to?(:easy_avatar) && issue.assigned_to.easy_avatar.present?
          assigned_to_hash[:avatar_urls] = Hash[EasyAvatar::IMAGE_STYLES.keys.map do |style|
            [ style, issue.assigned_to.easy_avatar.image.url(style) ]
          end]
        end
        api.assigned_to(assigned_to_hash)
      end
      api.category(:id => issue.category_id, :name => issue.category.name) unless issue.category.nil?
      api.fixed_version(:id => issue.fixed_version_id, :name => issue.fixed_version.name) unless issue.fixed_version.nil?
      api.parent(:id => issue.parent_id) unless issue.parent.nil?

      api.subject     issue.subject
      api.description issue.description
      api.start_date  issue.start_date
      api.due_date    issue.due_date
      api.done_ratio  issue.done_ratio
      api.is_private  issue.is_private
      api.is_favorited issue.is_favorited?
      api.estimated_hours issue.estimated_hours
      api.total_estimated_hours issue.total_estimated_hours if include_in_api_response?('total_estimated_time')
      if include_in_api_response?('spent_time')
        api.spent_hours issue.spent_hours
        api.total_spent_hours issue.total_spent_hours
      end
      api.easy_email_to issue.easy_email_to if issue.easy_email_to.present?
      api.easy_email_cc issue.easy_email_cc if issue.easy_email_cc.present?

      render_api_custom_values issue.visible_custom_field_values, api

      api.created_on issue.created_on
      api.updated_on issue.updated_on
      api.closed_on  issue.closed_on

      api.array :attachments do
        issue.attachments.each do |attachment|
          render_api_attachment(attachment, api)
        end
      end if include_in_api_response?('attachments')

      api.array :relations do
        issue.relations.each do |relation|
          api.relation(:id => relation.id, :issue_id => relation.issue_from_id, :issue_to_id => relation.issue_to_id, :relation_type => relation.relation_type, :delay => relation.delay)
        end
      end if include_in_api_response?('relations')

      call_hook(:view_issues_show_api_bottom, { api: api, issue: issue })
    end
  end
end
